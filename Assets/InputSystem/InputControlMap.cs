//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/InputControlMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputControlMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputControlMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControlMap"",
    ""maps"": [
        {
            ""name"": ""TreeScene"",
            ""id"": ""8f8da3ac-774e-4a88-ba5b-729df90f816a"",
            ""actions"": [
                {
                    ""name"": ""MouseDelta"",
                    ""type"": ""Value"",
                    ""id"": ""c490dc66-cc12-4ba8-b521-28642b095b8c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseButton"",
                    ""type"": ""Value"",
                    ""id"": ""d15e1a54-fda0-4b3d-a896-f4fd7ed1698c"",
                    ""expectedControlType"": ""Analog"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseWheel"",
                    ""type"": ""Value"",
                    ""id"": ""22816414-f921-4967-9639-6ab1e77fc5a2"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""23ae7bf4-73d7-4ccb-881d-5022af865fa7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fedd11db-b1e3-4078-961f-60d1b0320ad5"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MOBILE"",
                    ""action"": ""MouseDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee29b4da-d946-4632-87e9-d3758e3a07f4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MouseButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c847975b-68db-4469-a70b-b777d9401495"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MOBILE"",
                    ""action"": ""MouseButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8926ecd-cecf-4727-ab01-470a8dbdc160"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MouseWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""MOBILE"",
            ""bindingGroup"": ""MOBILE"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // TreeScene
        m_TreeScene = asset.FindActionMap("TreeScene", throwIfNotFound: true);
        m_TreeScene_MouseDelta = m_TreeScene.FindAction("MouseDelta", throwIfNotFound: true);
        m_TreeScene_MouseButton = m_TreeScene.FindAction("MouseButton", throwIfNotFound: true);
        m_TreeScene_MouseWheel = m_TreeScene.FindAction("MouseWheel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TreeScene
    private readonly InputActionMap m_TreeScene;
    private List<ITreeSceneActions> m_TreeSceneActionsCallbackInterfaces = new List<ITreeSceneActions>();
    private readonly InputAction m_TreeScene_MouseDelta;
    private readonly InputAction m_TreeScene_MouseButton;
    private readonly InputAction m_TreeScene_MouseWheel;
    public struct TreeSceneActions
    {
        private @InputControlMap m_Wrapper;
        public TreeSceneActions(@InputControlMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseDelta => m_Wrapper.m_TreeScene_MouseDelta;
        public InputAction @MouseButton => m_Wrapper.m_TreeScene_MouseButton;
        public InputAction @MouseWheel => m_Wrapper.m_TreeScene_MouseWheel;
        public InputActionMap Get() { return m_Wrapper.m_TreeScene; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TreeSceneActions set) { return set.Get(); }
        public void AddCallbacks(ITreeSceneActions instance)
        {
            if (instance == null || m_Wrapper.m_TreeSceneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TreeSceneActionsCallbackInterfaces.Add(instance);
            @MouseDelta.started += instance.OnMouseDelta;
            @MouseDelta.performed += instance.OnMouseDelta;
            @MouseDelta.canceled += instance.OnMouseDelta;
            @MouseButton.started += instance.OnMouseButton;
            @MouseButton.performed += instance.OnMouseButton;
            @MouseButton.canceled += instance.OnMouseButton;
            @MouseWheel.started += instance.OnMouseWheel;
            @MouseWheel.performed += instance.OnMouseWheel;
            @MouseWheel.canceled += instance.OnMouseWheel;
        }

        private void UnregisterCallbacks(ITreeSceneActions instance)
        {
            @MouseDelta.started -= instance.OnMouseDelta;
            @MouseDelta.performed -= instance.OnMouseDelta;
            @MouseDelta.canceled -= instance.OnMouseDelta;
            @MouseButton.started -= instance.OnMouseButton;
            @MouseButton.performed -= instance.OnMouseButton;
            @MouseButton.canceled -= instance.OnMouseButton;
            @MouseWheel.started -= instance.OnMouseWheel;
            @MouseWheel.performed -= instance.OnMouseWheel;
            @MouseWheel.canceled -= instance.OnMouseWheel;
        }

        public void RemoveCallbacks(ITreeSceneActions instance)
        {
            if (m_Wrapper.m_TreeSceneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITreeSceneActions instance)
        {
            foreach (var item in m_Wrapper.m_TreeSceneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TreeSceneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TreeSceneActions @TreeScene => new TreeSceneActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    private int m_MOBILESchemeIndex = -1;
    public InputControlScheme MOBILEScheme
    {
        get
        {
            if (m_MOBILESchemeIndex == -1) m_MOBILESchemeIndex = asset.FindControlSchemeIndex("MOBILE");
            return asset.controlSchemes[m_MOBILESchemeIndex];
        }
    }
    public interface ITreeSceneActions
    {
        void OnMouseDelta(InputAction.CallbackContext context);
        void OnMouseButton(InputAction.CallbackContext context);
        void OnMouseWheel(InputAction.CallbackContext context);
    }
}
